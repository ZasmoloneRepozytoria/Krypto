package pl.lodz.p.edu

class AesEncrypter(val key: AesKey) : Encrypter, Decrypter {
    // Tutaj tylko szyfrowanie i deszyfrowanie danych w postaci bajt√≥w.

    /**
     * Dodaje klucz rundy [round] do [state].
     */
    private fun addRoundKey(state: Array<UByteArray>, roundKeys: Array<UByteArray>, round: Int): Array<UByteArray> {
        val tmp = Array(4) { UByteArray(4) }
        for (i in 0..3){
            for (j in 0..3){
                tmp[j][i] = state[j][i] xor roundKeys[4*round+i][j]
            }
        }
        return tmp
    }

    private fun subBytes(state: Array<UByteArray>): Array<UByteArray> {
        val tmp = Array<UByteArray>(4){UByteArray(4)}
        for (i in 0..15) {
            for (j in 0..15) {
                tmp[i][j] = generateSBox()[state[i][j].toInt()]
            }
        }
        return tmp
    }

    private fun shiftRows(state: Array<UByteArray>): Array<UByteArray> {
        val tmp = Array(4){UByteArray(4)}
        for (i in 0..3) {
            for (j in 0..3)
                tmp[i][j] = state[i][(i+j).mod(4)]
        }
        return tmp
    }

    private fun mixColumns(state: Array<UByteArray>): Array<UByteArray> {
        fun mulBy2(byte: UByte): UByte{
            var tmp = byte.toInt()
            tmp = tmp shl 1
            if (tmp>0xFF) {
                tmp = tmp xor 0x1B
            }
            return tmp.toUByte()
        }
        fun mulBy3(byte: UByte): UByte{
            return mulBy2(byte) xor byte
        }

        val tmp = Array(4) { UByteArray(4) }
        for (i in 0..3) {
            tmp[0][i] = mulBy2(state[0][i]) xor mulBy3(state[1][i]) xor state[2][i] xor state[3][i]
            tmp[1][i] = state[0][i] xor mulBy2(state[1][i]) xor mulBy3(state[2][i]) xor state[3][i]
            tmp[2][i] = state[0][i] xor state[1][i] xor mulBy2(state[2][i]) xor mulBy3(state[3][i])
            tmp[3][i] = mulBy3(state[0][i]) xor state[1][i] xor state[2][i] xor mulBy2(state[3][i])
        }
        return tmp
    }

    override fun encryptData(data: UByteArray): UByteArray {
        if (data.size != 16)
            throw IllegalArgumentException("Block of data must be 16 byte long")

        var state = arrayOf(data.copyOfRange(0, 3), data.copyOfRange(4, 7), data.copyOfRange(8, 11), data.copyOfRange(12, 15))
        val roundKeys = key.genSubKeys()
        state = addRoundKey(state, roundKeys, 0)
        for (round in 1..<key.getNumberOfRounds()) {
            state = subBytes(state)
            state = shiftRows(state)
            state = mixColumns(state)
            state = addRoundKey(state, roundKeys, round)
        }
        state = subBytes(state)
        state = shiftRows(state)
        state = addRoundKey(state, roundKeys, 16)
        return state.flatMap { it.asIterable() }.toUByteArray()
    }

    override fun decryptData(data: UByteArray): UByteArray {
        throw NotImplementedError("AES decryption is not implemented yet!")
    }

    companion object {
        fun generateSBox(): UByteArray = ubyteArrayOf(
            0x63u, 0x7Cu, 0x77u, 0x7Bu, 0xF2u, 0x6Bu, 0x6Fu, 0xC5u, 0x30u, 0x01u, 0x67u, 0x2Bu, 0xFEu, 0xD7u, 0xABu, 0x76u,
            0xCAu, 0x82u, 0xC9u, 0x7Du, 0xFAu, 0x59u, 0x47u, 0xF0u, 0xADu, 0xD4u, 0xA2u, 0xAFu, 0x9Cu, 0xA4u, 0x72u, 0xC0u,
            0xB7u, 0xFDu, 0x93u, 0x26u, 0x36u, 0x3Fu, 0xF7u, 0xCCu, 0x34u, 0xA5u, 0xE5u, 0xF1u, 0x71u, 0xD8u, 0x31u, 0x15u,
            0x04u, 0xC7u, 0x23u, 0xC3u, 0x18u, 0x96u, 0x05u, 0x9Au, 0x07u, 0x12u, 0x80u, 0xE2u, 0xEBu, 0x27u, 0xB2u, 0x75u,
            0x09u, 0x83u, 0x2Cu, 0x1Au, 0x1Bu, 0x6Eu, 0x5Au, 0xA0u, 0x52u, 0x3Bu, 0xD6u, 0xB3u, 0x29u, 0xE3u, 0x2Fu, 0x84u,
            0x53u, 0xD1u, 0x00u, 0xEDu, 0x20u, 0xFCu, 0xB1u, 0x5Bu, 0x6Au, 0xCBu, 0xBEu, 0x39u, 0x4Au, 0x4Cu, 0x58u, 0xCFu,
            0xD0u, 0xEFu, 0xAAu, 0xFBu, 0x43u, 0x4Du, 0x33u, 0x85u, 0x45u, 0xF9u, 0x02u, 0x7Fu, 0x50u, 0x3Cu, 0x9Fu, 0xA8u,
            0x51u, 0xA3u, 0x40u, 0x8Fu, 0x92u, 0x9Du, 0x38u, 0xF5u, 0xBCu, 0xB6u, 0xDAu, 0x21u, 0x10u, 0xFFu, 0xF3u, 0xD2u,
            0xCDu, 0x0Cu, 0x13u, 0xECu, 0x5Fu, 0x97u, 0x44u, 0x17u, 0xC4u, 0xA7u, 0x7Eu, 0x3Du, 0x64u, 0x5Du, 0x19u, 0x73u,
            0x60u, 0x81u, 0x4Fu, 0xDCu, 0x22u, 0x2Au, 0x90u, 0x88u, 0x46u, 0xEEu, 0xB8u, 0x14u, 0xDEu, 0x5Eu, 0x0Bu, 0xDBu,
            0xE0u, 0x32u, 0x3Au, 0x0Au, 0x49u, 0x06u, 0x24u, 0x5Cu, 0xC2u, 0xD3u, 0xACu, 0x62u, 0x91u, 0x95u, 0xE4u, 0x79u,
            0xE7u, 0xC8u, 0x37u, 0x6Du, 0x8Du, 0xD5u, 0x4Eu, 0xA9u, 0x6Cu, 0x56u, 0xF4u, 0xEAu, 0x65u, 0x7Au, 0xAEu, 0x08u,
            0xBAu, 0x78u, 0x25u, 0x2Eu, 0x1Cu, 0xA6u, 0xB4u, 0xC6u, 0xE8u, 0xDDu, 0x74u, 0x1Fu, 0x4Bu, 0xBDu, 0x8Bu, 0x8Au,
            0x70u, 0x3Eu, 0xB5u, 0x66u, 0x48u, 0x03u, 0xF6u, 0x0Eu, 0x61u, 0x35u, 0x57u, 0xB9u, 0x86u, 0xC1u, 0x1Du, 0x9Eu,
            0xE1u, 0xF8u, 0x98u, 0x11u, 0x69u, 0xD9u, 0x8Eu, 0x94u, 0x9Bu, 0x1Eu, 0x87u, 0xE9u, 0xCEu, 0x55u, 0x28u, 0xDFu,
            0x8Cu, 0xA1u, 0x89u, 0x0Du, 0xBFu, 0xE6u, 0x42u, 0x68u, 0x41u, 0x99u, 0x2Du, 0x0Fu, 0xB0u, 0x54u, 0xBBu, 0x16u
        )
    }
}
