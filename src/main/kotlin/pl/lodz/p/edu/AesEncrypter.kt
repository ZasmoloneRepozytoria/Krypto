package pl.lodz.p.edu

class AesEncrypter(val key: AesKey) : Encrypter, Decrypter {

    private val mul2 = ubyteArrayOf(
        0x00u,0x02u,0x04u,0x06u,0x08u,0x0au,0x0cu,0x0eu,0x10u,0x12u,0x14u,0x16u,0x18u,0x1au,0x1cu,0x1eu,
        0x20u,0x22u,0x24u,0x26u,0x28u,0x2au,0x2cu,0x2eu,0x30u,0x32u,0x34u,0x36u,0x38u,0x3au,0x3cu,0x3eu,
        0x40u,0x42u,0x44u,0x46u,0x48u,0x4au,0x4cu,0x4eu,0x50u,0x52u,0x54u,0x56u,0x58u,0x5au,0x5cu,0x5eu,
        0x60u,0x62u,0x64u,0x66u,0x68u,0x6au,0x6cu,0x6eu,0x70u,0x72u,0x74u,0x76u,0x78u,0x7au,0x7cu,0x7eu,
        0x80u,0x82u,0x84u,0x86u,0x88u,0x8au,0x8cu,0x8eu,0x90u,0x92u,0x94u,0x96u,0x98u,0x9au,0x9cu,0x9eu,
        0xa0u,0xa2u,0xa4u,0xa6u,0xa8u,0xaau,0xacu,0xaeu,0xb0u,0xb2u,0xb4u,0xb6u,0xb8u,0xbau,0xbcu,0xbeu,
        0xc0u,0xc2u,0xc4u,0xc6u,0xc8u,0xcau,0xccu,0xceu,0xd0u,0xd2u,0xd4u,0xd6u,0xd8u,0xdau,0xdcu,0xdeu,
        0xe0u,0xe2u,0xe4u,0xe6u,0xe8u,0xeau,0xecu,0xeeu,0xf0u,0xf2u,0xf4u,0xf6u,0xf8u,0xfau,0xfcu,0xfeu,
        0x1bu,0x19u,0x1fu,0x1du,0x13u,0x11u,0x17u,0x15u,0x0bu,0x09u,0x0fu,0x0du,0x03u,0x01u,0x07u,0x05u,
        0x3bu,0x39u,0x3fu,0x3du,0x33u,0x31u,0x37u,0x35u,0x2bu,0x29u,0x2fu,0x2du,0x23u,0x21u,0x27u,0x25u,
        0x5bu,0x59u,0x5fu,0x5du,0x53u,0x51u,0x57u,0x55u,0x4bu,0x49u,0x4fu,0x4du,0x43u,0x41u,0x47u,0x45u,
        0x7bu,0x79u,0x7fu,0x7du,0x73u,0x71u,0x77u,0x75u,0x6bu,0x69u,0x6fu,0x6du,0x63u,0x61u,0x67u,0x65u,
        0x9bu,0x99u,0x9fu,0x9du,0x93u,0x91u,0x97u,0x95u,0x8bu,0x89u,0x8fu,0x8du,0x83u,0x81u,0x87u,0x85u,
        0xbbu,0xb9u,0xbfu,0xbdu,0xb3u,0xb1u,0xb7u,0xb5u,0xabu,0xa9u,0xafu,0xadu,0xa3u,0xa1u,0xa7u,0xa5u,
        0xdbu,0xd9u,0xdfu,0xddu,0xd3u,0xd1u,0xd7u,0xd5u,0xcbu,0xc9u,0xcfu,0xcdu,0xc3u,0xc1u,0xc7u,0xc5u,
        0xfbu,0xf9u,0xffu,0xfdu,0xf3u,0xf1u,0xf7u,0xf5u,0xebu,0xe9u,0xefu,0xedu,0xe3u,0xe1u,0xe7u,0xe5u)

    private val mul3 = ubyteArrayOf(
        0x00u,0x03u,0x06u,0x05u,0x0cu,0x0fu,0x0au,0x09u,0x18u,0x1bu,0x1eu,0x1du,0x14u,0x17u,0x12u,0x11u,
        0x30u,0x33u,0x36u,0x35u,0x3cu,0x3fu,0x3au,0x39u,0x28u,0x2bu,0x2eu,0x2du,0x24u,0x27u,0x22u,0x21u,
        0x60u,0x63u,0x66u,0x65u,0x6cu,0x6fu,0x6au,0x69u,0x78u,0x7bu,0x7eu,0x7du,0x74u,0x77u,0x72u,0x71u,
        0x50u,0x53u,0x56u,0x55u,0x5cu,0x5fu,0x5au,0x59u,0x48u,0x4bu,0x4eu,0x4du,0x44u,0x47u,0x42u,0x41u,
        0xc0u,0xc3u,0xc6u,0xc5u,0xccu,0xcfu,0xcau,0xc9u,0xd8u,0xdbu,0xdeu,0xddu,0xd4u,0xd7u,0xd2u,0xd1u,
        0xf0u,0xf3u,0xf6u,0xf5u,0xfcu,0xffu,0xfau,0xf9u,0xe8u,0xebu,0xeeu,0xedu,0xe4u,0xe7u,0xe2u,0xe1u,
        0xa0u,0xa3u,0xa6u,0xa5u,0xacu,0xafu,0xaau,0xa9u,0xb8u,0xbbu,0xbeu,0xbdu,0xb4u,0xb7u,0xb2u,0xb1u,
        0x90u,0x93u,0x96u,0x95u,0x9cu,0x9fu,0x9au,0x99u,0x88u,0x8bu,0x8eu,0x8du,0x84u,0x87u,0x82u,0x81u,
        0x9bu,0x98u,0x9du,0x9eu,0x97u,0x94u,0x91u,0x92u,0x83u,0x80u,0x85u,0x86u,0x8fu,0x8cu,0x89u,0x8au,
        0xabu,0xa8u,0xadu,0xaeu,0xa7u,0xa4u,0xa1u,0xa2u,0xb3u,0xb0u,0xb5u,0xb6u,0xbfu,0xbcu,0xb9u,0xbau,
        0xfbu,0xf8u,0xfdu,0xfeu,0xf7u,0xf4u,0xf1u,0xf2u,0xe3u,0xe0u,0xe5u,0xe6u,0xefu,0xecu,0xe9u,0xeau,
        0xcbu,0xc8u,0xcdu,0xceu,0xc7u,0xc4u,0xc1u,0xc2u,0xd3u,0xd0u,0xd5u,0xd6u,0xdfu,0xdcu,0xd9u,0xdau,
        0x5bu,0x58u,0x5du,0x5eu,0x57u,0x54u,0x51u,0x52u,0x43u,0x40u,0x45u,0x46u,0x4fu,0x4cu,0x49u,0x4au,
        0x6bu,0x68u,0x6du,0x6eu,0x67u,0x64u,0x61u,0x62u,0x73u,0x70u,0x75u,0x76u,0x7fu,0x7cu,0x79u,0x7au,
        0x3bu,0x38u,0x3du,0x3eu,0x37u,0x34u,0x31u,0x32u,0x23u,0x20u,0x25u,0x26u,0x2fu,0x2cu,0x29u,0x2au,
        0x0bu,0x08u,0x0du,0x0eu,0x07u,0x04u,0x01u,0x02u,0x13u,0x10u,0x15u,0x16u,0x1fu,0x1cu,0x19u,0x1au)

    private val mul9 = ubyteArrayOf(
        0x00u,0x09u,0x12u,0x1bu,0x24u,0x2du,0x36u,0x3fu,0x48u,0x41u,0x5au,0x53u,0x6cu,0x65u,0x7eu,0x77u,
        0x90u,0x99u,0x82u,0x8bu,0xb4u,0xbdu,0xa6u,0xafu,0xd8u,0xd1u,0xcau,0xc3u,0xfcu,0xf5u,0xeeu,0xe7u,
        0x3bu,0x32u,0x29u,0x20u,0x1fu,0x16u,0x0du,0x04u,0x73u,0x7au,0x61u,0x68u,0x57u,0x5eu,0x45u,0x4cu,
        0xabu,0xa2u,0xb9u,0xb0u,0x8fu,0x86u,0x9du,0x94u,0xe3u,0xeau,0xf1u,0xf8u,0xc7u,0xceu,0xd5u,0xdcu,
        0x76u,0x7fu,0x64u,0x6du,0x52u,0x5bu,0x40u,0x49u,0x3eu,0x37u,0x2cu,0x25u,0x1au,0x13u,0x08u,0x01u,
        0xe6u,0xefu,0xf4u,0xfdu,0xc2u,0xcbu,0xd0u,0xd9u,0xaeu,0xa7u,0xbcu,0xb5u,0x8au,0x83u,0x98u,0x91u,
        0x4du,0x44u,0x5fu,0x56u,0x69u,0x60u,0x7bu,0x72u,0x05u,0x0cu,0x17u,0x1eu,0x21u,0x28u,0x33u,0x3au,
        0xddu,0xd4u,0xcfu,0xc6u,0xf9u,0xf0u,0xebu,0xe2u,0x95u,0x9cu,0x87u,0x8eu,0xb1u,0xb8u,0xa3u,0xaau,
        0xecu,0xe5u,0xfeu,0xf7u,0xc8u,0xc1u,0xdau,0xd3u,0xa4u,0xadu,0xb6u,0xbfu,0x80u,0x89u,0x92u,0x9bu,
        0x7cu,0x75u,0x6eu,0x67u,0x58u,0x51u,0x4au,0x43u,0x34u,0x3du,0x26u,0x2fu,0x10u,0x19u,0x02u,0x0bu,
        0xd7u,0xdeu,0xc5u,0xccu,0xf3u,0xfau,0xe1u,0xe8u,0x9fu,0x96u,0x8du,0x84u,0xbbu,0xb2u,0xa9u,0xa0u,
        0x47u,0x4eu,0x55u,0x5cu,0x63u,0x6au,0x71u,0x78u,0x0fu,0x06u,0x1du,0x14u,0x2bu,0x22u,0x39u,0x30u,
        0x9au,0x93u,0x88u,0x81u,0xbeu,0xb7u,0xacu,0xa5u,0xd2u,0xdbu,0xc0u,0xc9u,0xf6u,0xffu,0xe4u,0xedu,
        0x0au,0x03u,0x18u,0x11u,0x2eu,0x27u,0x3cu,0x35u,0x42u,0x4bu,0x50u,0x59u,0x66u,0x6fu,0x74u,0x7du,
        0xa1u,0xa8u,0xb3u,0xbau,0x85u,0x8cu,0x97u,0x9eu,0xe9u,0xe0u,0xfbu,0xf2u,0xcdu,0xc4u,0xdfu,0xd6u,
        0x31u,0x38u,0x23u,0x2au,0x15u,0x1cu,0x07u,0x0eu,0x79u,0x70u,0x6bu,0x62u,0x5du,0x54u,0x4fu,0x46u)

    private val mul11 = ubyteArrayOf(
        0x00u,0x0bu,0x16u,0x1du,0x2cu,0x27u,0x3au,0x31u,0x58u,0x53u,0x4eu,0x45u,0x74u,0x7fu,0x62u,0x69u,
        0xb0u,0xbbu,0xa6u,0xadu,0x9cu,0x97u,0x8au,0x81u,0xe8u,0xe3u,0xfeu,0xf5u,0xc4u,0xcfu,0xd2u,0xd9u,
        0x7bu,0x70u,0x6du,0x66u,0x57u,0x5cu,0x41u,0x4au,0x23u,0x28u,0x35u,0x3eu,0x0fu,0x04u,0x19u,0x12u,
        0xcbu,0xc0u,0xddu,0xd6u,0xe7u,0xecu,0xf1u,0xfau,0x93u,0x98u,0x85u,0x8eu,0xbfu,0xb4u,0xa9u,0xa2u,
        0xf6u,0xfdu,0xe0u,0xebu,0xdau,0xd1u,0xccu,0xc7u,0xaeu,0xa5u,0xb8u,0xb3u,0x82u,0x89u,0x94u,0x9fu,
        0x46u,0x4du,0x50u,0x5bu,0x6au,0x61u,0x7cu,0x77u,0x1eu,0x15u,0x08u,0x03u,0x32u,0x39u,0x24u,0x2fu,
        0x8du,0x86u,0x9bu,0x90u,0xa1u,0xaau,0xb7u,0xbcu,0xd5u,0xdeu,0xc3u,0xc8u,0xf9u,0xf2u,0xefu,0xe4u,
        0x3du,0x36u,0x2bu,0x20u,0x11u,0x1au,0x07u,0x0cu,0x65u,0x6eu,0x73u,0x78u,0x49u,0x42u,0x5fu,0x54u,
        0xf7u,0xfcu,0xe1u,0xeau,0xdbu,0xd0u,0xcdu,0xc6u,0xafu,0xa4u,0xb9u,0xb2u,0x83u,0x88u,0x95u,0x9eu,
        0x47u,0x4cu,0x51u,0x5au,0x6bu,0x60u,0x7du,0x76u,0x1fu,0x14u,0x09u,0x02u,0x33u,0x38u,0x25u,0x2eu,
        0x8cu,0x87u,0x9au,0x91u,0xa0u,0xabu,0xb6u,0xbdu,0xd4u,0xdfu,0xc2u,0xc9u,0xf8u,0xf3u,0xeeu,0xe5u,
        0x3cu,0x37u,0x2au,0x21u,0x10u,0x1bu,0x06u,0x0du,0x64u,0x6fu,0x72u,0x79u,0x48u,0x43u,0x5eu,0x55u,
        0x01u,0x0au,0x17u,0x1cu,0x2du,0x26u,0x3bu,0x30u,0x59u,0x52u,0x4fu,0x44u,0x75u,0x7eu,0x63u,0x68u,
        0xb1u,0xbau,0xa7u,0xacu,0x9du,0x96u,0x8bu,0x80u,0xe9u,0xe2u,0xffu,0xf4u,0xc5u,0xceu,0xd3u,0xd8u,
        0x7au,0x71u,0x6cu,0x67u,0x56u,0x5du,0x40u,0x4bu,0x22u,0x29u,0x34u,0x3fu,0x0eu,0x05u,0x18u,0x13u,
        0xcau,0xc1u,0xdcu,0xd7u,0xe6u,0xedu,0xf0u,0xfbu,0x92u,0x99u,0x84u,0x8fu,0xbeu,0xb5u,0xa8u,0xa3u)

    private val mul13 = ubyteArrayOf(
        0x00u,0x0du,0x1au,0x17u,0x34u,0x39u,0x2eu,0x23u,0x68u,0x65u,0x72u,0x7fu,0x5cu,0x51u,0x46u,0x4bu,
        0xd0u,0xddu,0xcau,0xc7u,0xe4u,0xe9u,0xfeu,0xf3u,0xb8u,0xb5u,0xa2u,0xafu,0x8cu,0x81u,0x96u,0x9bu,
        0xbbu,0xb6u,0xa1u,0xacu,0x8fu,0x82u,0x95u,0x98u,0xd3u,0xdeu,0xc9u,0xc4u,0xe7u,0xeau,0xfdu,0xf0u,
        0x6bu,0x66u,0x71u,0x7cu,0x5fu,0x52u,0x45u,0x48u,0x03u,0x0eu,0x19u,0x14u,0x37u,0x3au,0x2du,0x20u,
        0x6du,0x60u,0x77u,0x7au,0x59u,0x54u,0x43u,0x4eu,0x05u,0x08u,0x1fu,0x12u,0x31u,0x3cu,0x2bu,0x26u,
        0xbdu,0xb0u,0xa7u,0xaau,0x89u,0x84u,0x93u,0x9eu,0xd5u,0xd8u,0xcfu,0xc2u,0xe1u,0xecu,0xfbu,0xf6u,
        0xd6u,0xdbu,0xccu,0xc1u,0xe2u,0xefu,0xf8u,0xf5u,0xbeu,0xb3u,0xa4u,0xa9u,0x8au,0x87u,0x90u,0x9du,
        0x06u,0x0bu,0x1cu,0x11u,0x32u,0x3fu,0x28u,0x25u,0x6eu,0x63u,0x74u,0x79u,0x5au,0x57u,0x40u,0x4du,
        0xdau,0xd7u,0xc0u,0xcdu,0xeeu,0xe3u,0xf4u,0xf9u,0xb2u,0xbfu,0xa8u,0xa5u,0x86u,0x8bu,0x9cu,0x91u,
        0x0au,0x07u,0x10u,0x1du,0x3eu,0x33u,0x24u,0x29u,0x62u,0x6fu,0x78u,0x75u,0x56u,0x5bu,0x4cu,0x41u,
        0x61u,0x6cu,0x7bu,0x76u,0x55u,0x58u,0x4fu,0x42u,0x09u,0x04u,0x13u,0x1eu,0x3du,0x30u,0x27u,0x2au,
        0xb1u,0xbcu,0xabu,0xa6u,0x85u,0x88u,0x9fu,0x92u,0xd9u,0xd4u,0xc3u,0xceu,0xedu,0xe0u,0xf7u,0xfau,
        0xb7u,0xbau,0xadu,0xa0u,0x83u,0x8eu,0x99u,0x94u,0xdfu,0xd2u,0xc5u,0xc8u,0xebu,0xe6u,0xf1u,0xfcu,
        0x67u,0x6au,0x7du,0x70u,0x53u,0x5eu,0x49u,0x44u,0x0fu,0x02u,0x15u,0x18u,0x3bu,0x36u,0x21u,0x2cu,
        0x0cu,0x01u,0x16u,0x1bu,0x38u,0x35u,0x22u,0x2fu,0x64u,0x69u,0x7eu,0x73u,0x50u,0x5du,0x4au,0x47u,
        0xdcu,0xd1u,0xc6u,0xcbu,0xe8u,0xe5u,0xf2u,0xffu,0xb4u,0xb9u,0xaeu,0xa3u,0x80u,0x8du,0x9au,0x97u)

    private val mul14 = ubyteArrayOf(
        0x00u,0x0eu,0x1cu,0x12u,0x38u,0x36u,0x24u,0x2au,0x70u,0x7eu,0x6cu,0x62u,0x48u,0x46u,0x54u,0x5au,
        0xe0u,0xeeu,0xfcu,0xf2u,0xd8u,0xd6u,0xc4u,0xcau,0x90u,0x9eu,0x8cu,0x82u,0xa8u,0xa6u,0xb4u,0xbau,
        0xdbu,0xd5u,0xc7u,0xc9u,0xe3u,0xedu,0xffu,0xf1u,0xabu,0xa5u,0xb7u,0xb9u,0x93u,0x9du,0x8fu,0x81u,
        0x3bu,0x35u,0x27u,0x29u,0x03u,0x0du,0x1fu,0x11u,0x4bu,0x45u,0x57u,0x59u,0x73u,0x7du,0x6fu,0x61u,
        0xadu,0xa3u,0xb1u,0xbfu,0x95u,0x9bu,0x89u,0x87u,0xddu,0xd3u,0xc1u,0xcfu,0xe5u,0xebu,0xf9u,0xf7u,
        0x4du,0x43u,0x51u,0x5fu,0x75u,0x7bu,0x69u,0x67u,0x3du,0x33u,0x21u,0x2fu,0x05u,0x0bu,0x19u,0x17u,
        0x76u,0x78u,0x6au,0x64u,0x4eu,0x40u,0x52u,0x5cu,0x06u,0x08u,0x1au,0x14u,0x3eu,0x30u,0x22u,0x2cu,
        0x96u,0x98u,0x8au,0x84u,0xaeu,0xa0u,0xb2u,0xbcu,0xe6u,0xe8u,0xfau,0xf4u,0xdeu,0xd0u,0xc2u,0xccu,
        0x41u,0x4fu,0x5du,0x53u,0x79u,0x77u,0x65u,0x6bu,0x31u,0x3fu,0x2du,0x23u,0x09u,0x07u,0x15u,0x1bu,
        0xa1u,0xafu,0xbdu,0xb3u,0x99u,0x97u,0x85u,0x8bu,0xd1u,0xdfu,0xcdu,0xc3u,0xe9u,0xe7u,0xf5u,0xfbu,
        0x9au,0x94u,0x86u,0x88u,0xa2u,0xacu,0xbeu,0xb0u,0xeau,0xe4u,0xf6u,0xf8u,0xd2u,0xdcu,0xceu,0xc0u,
        0x7au,0x74u,0x66u,0x68u,0x42u,0x4cu,0x5eu,0x50u,0x0au,0x04u,0x16u,0x18u,0x32u,0x3cu,0x2eu,0x20u,
        0xecu,0xe2u,0xf0u,0xfeu,0xd4u,0xdau,0xc8u,0xc6u,0x9cu,0x92u,0x80u,0x8eu,0xa4u,0xaau,0xb8u,0xb6u,
        0x0cu,0x02u,0x10u,0x1eu,0x34u,0x3au,0x28u,0x26u,0x7cu,0x72u,0x60u,0x6eu,0x44u,0x4au,0x58u,0x56u,
        0x37u,0x39u,0x2bu,0x25u,0x0fu,0x01u,0x13u,0x1du,0x47u,0x49u,0x5bu,0x55u,0x7fu,0x71u,0x63u,0x6du,
        0xd7u,0xd9u,0xcbu,0xc5u,0xefu,0xe1u,0xf3u,0xfdu,0xa7u,0xa9u,0xbbu,0xb5u,0x9fu,0x91u,0x83u,0x8du)
    // Tutaj tylko szyfrowanie i deszyfrowanie danych w postaci bajtów.

    /**
     * Dodaje klucz rundy [round] do [state].
     */
    private fun addRoundKey(state: Array<UByteArray>, roundKeys: Array<UByteArray>, round: Int): Array<UByteArray> {
        val tmp = Array(4) { UByteArray(4) }
        for (i in 0..3){
            for (j in 0..3){
                tmp[j][i] = state[j][i] xor roundKeys[(4*round)+i][j]
            }
        }
        return tmp
    }

    private fun subBytes(state: Array<UByteArray>): Array<UByteArray> {
        val tmp = Array<UByteArray>(4){UByteArray(4)}
        for (i in 0..3) {
            for (j in 0..3) {
                tmp[i][j] = generateSBox()[state[i][j].toInt()]
            }
        }
        return tmp
    }

    private fun invSubBytes(state: Array<UByteArray>): Array<UByteArray> {
        val tmp = Array<UByteArray>(4){UByteArray(4)}
        for (i in 0..3) {
            for (j in 0..3) {
                tmp[i][j] = generateInvSBox()[state[i][j].toInt()]
            }
        }
        return tmp
    }

    private fun shiftRows(state: Array<UByteArray>): Array<UByteArray> {
        val tmp = Array(4){UByteArray(4)}
        for (i in 0..3) {
            for (j in 0..3)
                tmp[i][j] = state[i][(i+j).mod(4)]
        }
        return tmp
    }

    private fun invShiftRows(state: Array<UByteArray>): Array<UByteArray> {
        val tmp = Array(4){UByteArray(4)}
        for (i in 0..3) {
            for (j in 0..3)
                tmp[i][j] = state[i][(j-i).mod(4)]
        }
        return tmp
    }

    private fun mixColumns(state: Array<UByteArray>): Array<UByteArray> {
        val tmp = Array(4) { UByteArray(4) }
        for (i in 0..3) {
            tmp[0][i] = mul2[state[0][i].toInt()] xor mul3[state[1][i].toInt()] xor state[2][i] xor state[3][i]
            tmp[1][i] = state[0][i] xor mul2[state[1][i].toInt()] xor mul3[state[2][i].toInt()] xor state[3][i]
            tmp[2][i] = state[0][i] xor state[1][i] xor mul2[state[2][i].toInt()] xor mul3[state[3][i].toInt()]
            tmp[3][i] = mul3[state[0][i].toInt()] xor state[1][i] xor state[2][i] xor mul2[state[3][i].toInt()]
        }
        return tmp
    }

    private fun invMixColumns(state: Array<UByteArray>): Array<UByteArray> {
        val tmp = Array(4) { UByteArray(4) }
        for (i in 0..3) {
            tmp[0][i] = mul14[state[0][i].toInt()] xor mul11[state[1][i].toInt()] xor mul13[state[2][i].toInt()] xor mul9[state[3][i].toInt()]
            tmp[1][i] = mul9[state[0][i].toInt()] xor mul14[state[1][i].toInt()] xor mul11[state[2][i].toInt()] xor mul13[state[3][i].toInt()]
            tmp[2][i] = mul13[state[0][i].toInt()] xor mul9[state[1][i].toInt()] xor mul14[state[2][i].toInt()] xor mul11[state[3][i].toInt()]
            tmp[3][i] = mul11[state[0][i].toInt()] xor mul13[state[1][i].toInt()] xor mul9[state[2][i].toInt()] xor mul14[state[3][i].toInt()]
        }
        return tmp
    }

    override fun encryptData(data: UByteArray): UByteArray {
        if (data.size != 16)
            throw IllegalArgumentException("Block of data must be 16 byte long")

        var state = Array<UByteArray>(4){UByteArray(4)}
        for (i in 0..3) {
            for (j in 0..3) {
                state[i][j] = data[i+(4*j)]
            }
        }

        val roundKeys = key.genSubKeys()

        state = addRoundKey(state, roundKeys, 0)
        for (round in 1..<key.getNumberOfRounds()) {
            state = subBytes(state)
            state = shiftRows(state)
            state = mixColumns(state)
            state = addRoundKey(state, roundKeys, round)
        }
        state = subBytes(state)
        state = shiftRows(state)
        state = addRoundKey(state, roundKeys, key.getNumberOfRounds())

        val output = UByteArray(16)
        for (i in 0..3) {
            for (j in 0..3) {
                output[i+4*j] = state[i][j]
            }
        }

        return output
    }

    override fun decryptData(data: UByteArray): UByteArray {
        if (data.size != 16)
            throw IllegalArgumentException("Block of data must be 16 byte long")

        var state = Array<UByteArray>(4){UByteArray(4)}
        for (i in 0..3) {
            for (j in 0..3) {
                state[i][j] = data[i+(4*j)]
            }
        }

        val roundKeys = key.genSubKeys()

        state = addRoundKey(state, roundKeys, key.getNumberOfRounds())
        state = invShiftRows(state)
        state = invSubBytes(state)

        for (round in key.getNumberOfRounds()-1 downTo 1) {
            state = addRoundKey(state, roundKeys, round)
            state = invMixColumns(state)
            state = invShiftRows(state)
            state = invSubBytes(state)
        }
        state = addRoundKey(state, roundKeys, 0)


        val output = UByteArray(16)
        for (i in 0..3) {
            for (j in 0..3) {
                output[i+4*j] = state[i][j]
            }
        }

        return output
    }

    companion object {
        fun generateSBox(): UByteArray = ubyteArrayOf(
            0x63u, 0x7Cu, 0x77u, 0x7Bu, 0xF2u, 0x6Bu, 0x6Fu, 0xC5u, 0x30u, 0x01u, 0x67u, 0x2Bu, 0xFEu, 0xD7u, 0xABu, 0x76u,
            0xCAu, 0x82u, 0xC9u, 0x7Du, 0xFAu, 0x59u, 0x47u, 0xF0u, 0xADu, 0xD4u, 0xA2u, 0xAFu, 0x9Cu, 0xA4u, 0x72u, 0xC0u,
            0xB7u, 0xFDu, 0x93u, 0x26u, 0x36u, 0x3Fu, 0xF7u, 0xCCu, 0x34u, 0xA5u, 0xE5u, 0xF1u, 0x71u, 0xD8u, 0x31u, 0x15u,
            0x04u, 0xC7u, 0x23u, 0xC3u, 0x18u, 0x96u, 0x05u, 0x9Au, 0x07u, 0x12u, 0x80u, 0xE2u, 0xEBu, 0x27u, 0xB2u, 0x75u,
            0x09u, 0x83u, 0x2Cu, 0x1Au, 0x1Bu, 0x6Eu, 0x5Au, 0xA0u, 0x52u, 0x3Bu, 0xD6u, 0xB3u, 0x29u, 0xE3u, 0x2Fu, 0x84u,
            0x53u, 0xD1u, 0x00u, 0xEDu, 0x20u, 0xFCu, 0xB1u, 0x5Bu, 0x6Au, 0xCBu, 0xBEu, 0x39u, 0x4Au, 0x4Cu, 0x58u, 0xCFu,
            0xD0u, 0xEFu, 0xAAu, 0xFBu, 0x43u, 0x4Du, 0x33u, 0x85u, 0x45u, 0xF9u, 0x02u, 0x7Fu, 0x50u, 0x3Cu, 0x9Fu, 0xA8u,
            0x51u, 0xA3u, 0x40u, 0x8Fu, 0x92u, 0x9Du, 0x38u, 0xF5u, 0xBCu, 0xB6u, 0xDAu, 0x21u, 0x10u, 0xFFu, 0xF3u, 0xD2u,
            0xCDu, 0x0Cu, 0x13u, 0xECu, 0x5Fu, 0x97u, 0x44u, 0x17u, 0xC4u, 0xA7u, 0x7Eu, 0x3Du, 0x64u, 0x5Du, 0x19u, 0x73u,
            0x60u, 0x81u, 0x4Fu, 0xDCu, 0x22u, 0x2Au, 0x90u, 0x88u, 0x46u, 0xEEu, 0xB8u, 0x14u, 0xDEu, 0x5Eu, 0x0Bu, 0xDBu,
            0xE0u, 0x32u, 0x3Au, 0x0Au, 0x49u, 0x06u, 0x24u, 0x5Cu, 0xC2u, 0xD3u, 0xACu, 0x62u, 0x91u, 0x95u, 0xE4u, 0x79u,
            0xE7u, 0xC8u, 0x37u, 0x6Du, 0x8Du, 0xD5u, 0x4Eu, 0xA9u, 0x6Cu, 0x56u, 0xF4u, 0xEAu, 0x65u, 0x7Au, 0xAEu, 0x08u,
            0xBAu, 0x78u, 0x25u, 0x2Eu, 0x1Cu, 0xA6u, 0xB4u, 0xC6u, 0xE8u, 0xDDu, 0x74u, 0x1Fu, 0x4Bu, 0xBDu, 0x8Bu, 0x8Au,
            0x70u, 0x3Eu, 0xB5u, 0x66u, 0x48u, 0x03u, 0xF6u, 0x0Eu, 0x61u, 0x35u, 0x57u, 0xB9u, 0x86u, 0xC1u, 0x1Du, 0x9Eu,
            0xE1u, 0xF8u, 0x98u, 0x11u, 0x69u, 0xD9u, 0x8Eu, 0x94u, 0x9Bu, 0x1Eu, 0x87u, 0xE9u, 0xCEu, 0x55u, 0x28u, 0xDFu,
            0x8Cu, 0xA1u, 0x89u, 0x0Du, 0xBFu, 0xE6u, 0x42u, 0x68u, 0x41u, 0x99u, 0x2Du, 0x0Fu, 0xB0u, 0x54u, 0xBBu, 0x16u
        )
        
        fun generateInvSBox(): UByteArray = ubyteArrayOf(
            0x52u, 0x09u, 0x6au, 0xd5u, 0x30u, 0x36u, 0xa5u, 0x38u, 0xbfu, 0x40u, 0xa3u, 0x9eu, 0x81u, 0xf3u, 0xd7u, 0xfbu,
            0x7cu, 0xe3u, 0x39u, 0x82u, 0x9bu, 0x2fu, 0xffu, 0x87u, 0x34u, 0x8eu, 0x43u, 0x44u, 0xc4u, 0xdeu, 0xe9u, 0xcbu,
            0x54u, 0x7bu, 0x94u, 0x32u, 0xa6u, 0xc2u, 0x23u, 0x3du, 0xeeu, 0x4cu, 0x95u, 0x0bu, 0x42u, 0xfau, 0xc3u, 0x4eu,
            0x08u, 0x2eu, 0xa1u, 0x66u, 0x28u, 0xd9u, 0x24u, 0xb2u, 0x76u, 0x5bu, 0xa2u, 0x49u, 0x6du, 0x8bu, 0xd1u, 0x25u,
            0x72u, 0xf8u, 0xf6u, 0x64u, 0x86u, 0x68u, 0x98u, 0x16u, 0xd4u, 0xa4u, 0x5cu, 0xccu, 0x5du, 0x65u, 0xb6u, 0x92u,
            0x6cu, 0x70u, 0x48u, 0x50u, 0xfdu, 0xedu, 0xb9u, 0xdau, 0x5eu, 0x15u, 0x46u, 0x57u, 0xa7u, 0x8du, 0x9du, 0x84u,
            0x90u, 0xd8u, 0xabu, 0x00u, 0x8cu, 0xbcu, 0xd3u, 0x0au, 0xf7u, 0xe4u, 0x58u, 0x05u, 0xb8u, 0xb3u, 0x45u, 0x06u,
            0xd0u, 0x2cu, 0x1eu, 0x8fu, 0xcau, 0x3fu, 0x0fu, 0x02u, 0xc1u, 0xafu, 0xbdu, 0x03u, 0x01u, 0x13u, 0x8au, 0x6bu,
            0x3au, 0x91u, 0x11u, 0x41u, 0x4fu, 0x67u, 0xdcu, 0xeau, 0x97u, 0xf2u, 0xcfu, 0xceu, 0xf0u, 0xb4u, 0xe6u, 0x73u,
            0x96u, 0xacu, 0x74u, 0x22u, 0xe7u, 0xadu, 0x35u, 0x85u, 0xe2u, 0xf9u, 0x37u, 0xe8u, 0x1cu, 0x75u, 0xdfu, 0x6eu,
            0x47u, 0xf1u, 0x1au, 0x71u, 0x1du, 0x29u, 0xc5u, 0x89u, 0x6fu, 0xb7u, 0x62u, 0x0eu, 0xaau, 0x18u, 0xbeu, 0x1bu,
            0xfcu, 0x56u, 0x3eu, 0x4bu, 0xc6u, 0xd2u, 0x79u, 0x20u, 0x9au, 0xdbu, 0xc0u, 0xfeu, 0x78u, 0xcdu, 0x5au, 0xf4u,
            0x1fu, 0xddu, 0xa8u, 0x33u, 0x88u, 0x07u, 0xc7u, 0x31u, 0xb1u, 0x12u, 0x10u, 0x59u, 0x27u, 0x80u, 0xecu, 0x5fu,
            0x60u, 0x51u, 0x7fu, 0xa9u, 0x19u, 0xb5u, 0x4au, 0x0du, 0x2du, 0xe5u, 0x7au, 0x9fu, 0x93u, 0xc9u, 0x9cu, 0xefu,
            0xa0u, 0xe0u, 0x3bu, 0x4du, 0xaeu, 0x2au, 0xf5u, 0xb0u, 0xc8u, 0xebu, 0xbbu, 0x3cu, 0x83u, 0x53u, 0x99u, 0x61u,
            0x17u, 0x2bu, 0x04u, 0x7eu, 0xbau, 0x77u, 0xd6u, 0x26u, 0xe1u, 0x69u, 0x14u, 0x63u, 0x55u, 0x21u, 0x0cu, 0x7du
        )
    }
}
